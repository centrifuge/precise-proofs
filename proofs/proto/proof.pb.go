// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proofs/proto/proof.proto

package proofspb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	descriptor "github.com/golang/protobuf/protoc-gen-go/descriptor"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MerkleHash struct {
	Left                 []byte   `protobuf:"bytes,1,opt,name=left,proto3" json:"left,omitempty"`
	Right                []byte   `protobuf:"bytes,2,opt,name=right,proto3" json:"right,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MerkleHash) Reset()         { *m = MerkleHash{} }
func (m *MerkleHash) String() string { return proto.CompactTextString(m) }
func (*MerkleHash) ProtoMessage()    {}
func (*MerkleHash) Descriptor() ([]byte, []int) {
	return fileDescriptor_8212f9bb681931f6, []int{0}
}

func (m *MerkleHash) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MerkleHash.Unmarshal(m, b)
}
func (m *MerkleHash) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MerkleHash.Marshal(b, m, deterministic)
}
func (m *MerkleHash) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MerkleHash.Merge(m, src)
}
func (m *MerkleHash) XXX_Size() int {
	return xxx_messageInfo_MerkleHash.Size(m)
}
func (m *MerkleHash) XXX_DiscardUnknown() {
	xxx_messageInfo_MerkleHash.DiscardUnknown(m)
}

var xxx_messageInfo_MerkleHash proto.InternalMessageInfo

func (m *MerkleHash) GetLeft() []byte {
	if m != nil {
		return m.Left
	}
	return nil
}

func (m *MerkleHash) GetRight() []byte {
	if m != nil {
		return m.Right
	}
	return nil
}

type Proof struct {
	// Types that are valid to be assigned to Property:
	//	*Proof_ReadableName
	//	*Proof_CompactName
	Property isProof_Property `protobuf_oneof:"property"`
	Value    []byte           `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Salt     []byte           `protobuf:"bytes,3,opt,name=salt,proto3" json:"salt,omitempty"`
	// hash is filled if value & salt are not available
	Hash []byte `protobuf:"bytes,6,opt,name=hash,proto3" json:"hash,omitempty"`
	// Fills either 'hashes' for standard Merkle trees or 'sorted_hashes' for a lexicograhical ordered of a node hash
	// not both
	Hashes               []*MerkleHash `protobuf:"bytes,4,rep,name=hashes,proto3" json:"hashes,omitempty"`
	SortedHashes         [][]byte      `protobuf:"bytes,5,rep,name=sorted_hashes,json=sortedHashes,proto3" json:"sorted_hashes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Proof) Reset()         { *m = Proof{} }
func (m *Proof) String() string { return proto.CompactTextString(m) }
func (*Proof) ProtoMessage()    {}
func (*Proof) Descriptor() ([]byte, []int) {
	return fileDescriptor_8212f9bb681931f6, []int{1}
}

func (m *Proof) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Proof.Unmarshal(m, b)
}
func (m *Proof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Proof.Marshal(b, m, deterministic)
}
func (m *Proof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Proof.Merge(m, src)
}
func (m *Proof) XXX_Size() int {
	return xxx_messageInfo_Proof.Size(m)
}
func (m *Proof) XXX_DiscardUnknown() {
	xxx_messageInfo_Proof.DiscardUnknown(m)
}

var xxx_messageInfo_Proof proto.InternalMessageInfo

type isProof_Property interface {
	isProof_Property()
}

type Proof_ReadableName struct {
	ReadableName string `protobuf:"bytes,7,opt,name=readable_name,json=readableName,proto3,oneof"`
}

type Proof_CompactName struct {
	CompactName []byte `protobuf:"bytes,9,opt,name=compact_name,json=compactName,proto3,oneof"`
}

func (*Proof_ReadableName) isProof_Property() {}

func (*Proof_CompactName) isProof_Property() {}

func (m *Proof) GetProperty() isProof_Property {
	if m != nil {
		return m.Property
	}
	return nil
}

func (m *Proof) GetReadableName() string {
	if x, ok := m.GetProperty().(*Proof_ReadableName); ok {
		return x.ReadableName
	}
	return ""
}

func (m *Proof) GetCompactName() []byte {
	if x, ok := m.GetProperty().(*Proof_CompactName); ok {
		return x.CompactName
	}
	return nil
}

func (m *Proof) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Proof) GetSalt() []byte {
	if m != nil {
		return m.Salt
	}
	return nil
}

func (m *Proof) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *Proof) GetHashes() []*MerkleHash {
	if m != nil {
		return m.Hashes
	}
	return nil
}

func (m *Proof) GetSortedHashes() [][]byte {
	if m != nil {
		return m.SortedHashes
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Proof) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Proof_ReadableName)(nil),
		(*Proof_CompactName)(nil),
	}
}

var E_ExcludeFromTree = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         2862100,
	Name:          "proofs.exclude_from_tree",
	Tag:           "varint,2862100,opt,name=exclude_from_tree",
	Filename:      "proto/proof.proto",
}

var E_HashedField = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         2862101,
	Name:          "proofs.hashed_field",
	Tag:           "varint,2862101,opt,name=hashed_field",
	Filename:      "proto/proof.proto",
}

var E_KeyLength = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*uint64)(nil),
	Field:         2862102,
	Name:          "proofs.key_length",
	Tag:           "varint,2862102,opt,name=key_length",
	Filename:      "proto/proof.proto",
}

var E_MappingKey = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         2862103,
	Name:          "proofs.mapping_key",
	Tag:           "bytes,2862103,opt,name=mapping_key",
	Filename:      "proto/proof.proto",
}

func init() {
	proto.RegisterType((*MerkleHash)(nil), "proofs.MerkleHash")
	proto.RegisterType((*Proof)(nil), "proofs.Proof")
	proto.RegisterExtension(E_ExcludeFromTree)
	proto.RegisterExtension(E_HashedField)
	proto.RegisterExtension(E_KeyLength)
	proto.RegisterExtension(E_MappingKey)
}

func init() { proto.RegisterFile("proto/proof.proto", fileDescriptor_8212f9bb681931f6) }

var fileDescriptor_8212f9bb681931f6 = []byte{
	// 418 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xcd, 0x8a, 0xd4, 0x40,
	0x10, 0xc7, 0x37, 0xce, 0x87, 0x33, 0x35, 0x59, 0x64, 0x9b, 0x3d, 0x04, 0x41, 0x08, 0xbb, 0x0a,
	0x83, 0x87, 0x0c, 0x28, 0x78, 0x98, 0x8b, 0x38, 0xc2, 0x32, 0xe0, 0xaa, 0x43, 0xe3, 0xc9, 0x4b,
	0xe8, 0x49, 0x2a, 0x1f, 0xa4, 0x93, 0x6e, 0xba, 0x7b, 0xc4, 0xbc, 0x87, 0x1f, 0x6f, 0xe1, 0xf3,
	0xf8, 0x14, 0x3e, 0x83, 0x74, 0x77, 0xc2, 0x1e, 0xe7, 0x94, 0xaa, 0x5f, 0xea, 0xff, 0xaf, 0xca,
	0x9f, 0xc0, 0x95, 0x54, 0xc2, 0x88, 0x8d, 0x54, 0x42, 0x14, 0x89, 0xab, 0xc9, 0xdc, 0x35, 0xfa,
	0x69, 0x5c, 0x0a, 0x51, 0x72, 0xdc, 0x38, 0x7a, 0x3c, 0x15, 0x9b, 0x1c, 0x75, 0xa6, 0x6a, 0x69,
	0x84, 0xf2, 0x93, 0x37, 0x6f, 0x00, 0x3e, 0xa2, 0x6a, 0x38, 0xee, 0x99, 0xae, 0x08, 0x81, 0x29,
	0xc7, 0xc2, 0x44, 0x41, 0x1c, 0xac, 0x43, 0xea, 0x6a, 0x72, 0x0d, 0x33, 0x55, 0x97, 0x95, 0x89,
	0x1e, 0x39, 0xe8, 0x9b, 0x9b, 0x7f, 0x01, 0xcc, 0x0e, 0x76, 0x09, 0x79, 0x01, 0x97, 0x0a, 0x59,
	0xce, 0x8e, 0x1c, 0xd3, 0x8e, 0xb5, 0x18, 0x3d, 0x8e, 0x83, 0xf5, 0x72, 0x7f, 0x41, 0xc3, 0x11,
	0x7f, 0x62, 0x2d, 0x92, 0x5b, 0x08, 0x33, 0xd1, 0x4a, 0x96, 0x19, 0x3f, 0xb5, 0xb4, 0x6e, 0xfb,
	0x0b, 0xba, 0x1a, 0xa8, 0x1b, 0xba, 0x86, 0xd9, 0x37, 0xc6, 0x4f, 0x38, 0xee, 0x72, 0x8d, 0xbd,
	0x4a, 0x33, 0x6e, 0xa2, 0x89, 0xbf, 0xca, 0xd6, 0x96, 0x55, 0x4c, 0x57, 0xd1, 0xdc, 0x33, 0x5b,
	0x93, 0x97, 0x30, 0xb7, 0x4f, 0xd4, 0xd1, 0x34, 0x9e, 0xac, 0x57, 0xaf, 0x48, 0xe2, 0x63, 0x48,
	0x1e, 0xbe, 0x90, 0x0e, 0x13, 0xe4, 0x16, 0x2e, 0xb5, 0x50, 0x06, 0xf3, 0x74, 0x90, 0xcc, 0xe2,
	0xc9, 0x3a, 0xa4, 0xa1, 0x87, 0x7b, 0xc7, 0x76, 0x00, 0x0b, 0xa9, 0x84, 0x44, 0x65, 0xfa, 0xed,
	0x3d, 0x5c, 0xe1, 0xf7, 0x8c, 0x9f, 0x72, 0x4c, 0x0b, 0x25, 0xda, 0xd4, 0x28, 0x44, 0xf2, 0x2c,
	0xf1, 0x01, 0x27, 0x63, 0xc0, 0xc9, 0x5d, 0x8d, 0x3c, 0xff, 0x2c, 0x4d, 0x2d, 0x3a, 0x1d, 0xfd,
	0xf8, 0xfb, 0xc7, 0x26, 0xb9, 0xa0, 0x4f, 0x06, 0xe9, 0x9d, 0x12, 0xed, 0x17, 0x85, 0xb8, 0x7d,
	0x0f, 0xa1, 0xdb, 0x9b, 0xa7, 0x85, 0x15, 0x9c, 0x33, 0xfa, 0x39, 0x1a, 0xad, 0xbc, 0xca, 0xbd,
	0xdc, 0xbe, 0x05, 0x68, 0xb0, 0x4f, 0x39, 0x76, 0xa5, 0xa9, 0xce, 0x59, 0xfc, 0xf2, 0x16, 0x53,
	0xba, 0x6c, 0xb0, 0xbf, 0x77, 0x92, 0xed, 0x3b, 0x58, 0xb5, 0x4c, 0xca, 0xba, 0x2b, 0xd3, 0x06,
	0xfb, 0x73, 0x0e, 0xbf, 0xbd, 0xc3, 0x92, 0xc2, 0x20, 0xfa, 0x80, 0xfd, 0xee, 0x39, 0x40, 0x26,
	0xda, 0x21, 0xe8, 0x1d, 0xb8, 0x5f, 0xe2, 0x60, 0xe5, 0x87, 0xe0, 0xeb, 0xc2, 0x53, 0x79, 0x3c,
	0xce, 0x9d, 0xe3, 0xeb, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0x74, 0xd2, 0xd0, 0x01, 0xab, 0x02,
	0x00, 0x00,
}
