// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proofs/proto/proof.proto

package proofspb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import descriptor "github.com/golang/protobuf/protoc-gen-go/descriptor"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MerkleHash struct {
	Left                 []byte   `protobuf:"bytes,1,opt,name=left,proto3" json:"left,omitempty"`
	Right                []byte   `protobuf:"bytes,2,opt,name=right,proto3" json:"right,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MerkleHash) Reset()         { *m = MerkleHash{} }
func (m *MerkleHash) String() string { return proto.CompactTextString(m) }
func (*MerkleHash) ProtoMessage()    {}
func (*MerkleHash) Descriptor() ([]byte, []int) {
	return fileDescriptor_proof_44973eef72e86904, []int{0}
}
func (m *MerkleHash) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MerkleHash.Unmarshal(m, b)
}
func (m *MerkleHash) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MerkleHash.Marshal(b, m, deterministic)
}
func (dst *MerkleHash) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MerkleHash.Merge(dst, src)
}
func (m *MerkleHash) XXX_Size() int {
	return xxx_messageInfo_MerkleHash.Size(m)
}
func (m *MerkleHash) XXX_DiscardUnknown() {
	xxx_messageInfo_MerkleHash.DiscardUnknown(m)
}

var xxx_messageInfo_MerkleHash proto.InternalMessageInfo

func (m *MerkleHash) GetLeft() []byte {
	if m != nil {
		return m.Left
	}
	return nil
}

func (m *MerkleHash) GetRight() []byte {
	if m != nil {
		return m.Right
	}
	return nil
}

type Proof struct {
	// Types that are valid to be assigned to Property:
	//	*Proof_ReadableName
	//	*Proof_CompactName
	Property isProof_Property `protobuf_oneof:"property"`
	Value    []byte           `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Salt     []byte           `protobuf:"bytes,3,opt,name=salt,proto3" json:"salt,omitempty"`
	// hash is filled if value & salt are not available
	Hash []byte `protobuf:"bytes,6,opt,name=hash,proto3" json:"hash,omitempty"`
	// Fills either 'hashes' for standard Merkle trees or 'sorted_hashes' for a lexicograhical ordered of a node hash
	// not both
	Hashes               []*MerkleHash `protobuf:"bytes,4,rep,name=hashes,proto3" json:"hashes,omitempty"`
	SortedHashes         [][]byte      `protobuf:"bytes,5,rep,name=sorted_hashes,json=sortedHashes,proto3" json:"sorted_hashes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Proof) Reset()         { *m = Proof{} }
func (m *Proof) String() string { return proto.CompactTextString(m) }
func (*Proof) ProtoMessage()    {}
func (*Proof) Descriptor() ([]byte, []int) {
	return fileDescriptor_proof_44973eef72e86904, []int{1}
}
func (m *Proof) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Proof.Unmarshal(m, b)
}
func (m *Proof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Proof.Marshal(b, m, deterministic)
}
func (dst *Proof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Proof.Merge(dst, src)
}
func (m *Proof) XXX_Size() int {
	return xxx_messageInfo_Proof.Size(m)
}
func (m *Proof) XXX_DiscardUnknown() {
	xxx_messageInfo_Proof.DiscardUnknown(m)
}

var xxx_messageInfo_Proof proto.InternalMessageInfo

type isProof_Property interface {
	isProof_Property()
}

type Proof_ReadableName struct {
	ReadableName string `protobuf:"bytes,7,opt,name=readable_name,json=readableName,proto3,oneof"`
}

type Proof_CompactName struct {
	CompactName []byte `protobuf:"bytes,9,opt,name=compact_name,json=compactName,proto3,oneof"`
}

func (*Proof_ReadableName) isProof_Property() {}

func (*Proof_CompactName) isProof_Property() {}

func (m *Proof) GetProperty() isProof_Property {
	if m != nil {
		return m.Property
	}
	return nil
}

func (m *Proof) GetReadableName() string {
	if x, ok := m.GetProperty().(*Proof_ReadableName); ok {
		return x.ReadableName
	}
	return ""
}

func (m *Proof) GetCompactName() []byte {
	if x, ok := m.GetProperty().(*Proof_CompactName); ok {
		return x.CompactName
	}
	return nil
}

func (m *Proof) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Proof) GetSalt() []byte {
	if m != nil {
		return m.Salt
	}
	return nil
}

func (m *Proof) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *Proof) GetHashes() []*MerkleHash {
	if m != nil {
		return m.Hashes
	}
	return nil
}

func (m *Proof) GetSortedHashes() [][]byte {
	if m != nil {
		return m.SortedHashes
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Proof) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Proof_OneofMarshaler, _Proof_OneofUnmarshaler, _Proof_OneofSizer, []interface{}{
		(*Proof_ReadableName)(nil),
		(*Proof_CompactName)(nil),
	}
}

func _Proof_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Proof)
	// property
	switch x := m.Property.(type) {
	case *Proof_ReadableName:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.ReadableName)
	case *Proof_CompactName:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.CompactName)
	case nil:
	default:
		return fmt.Errorf("Proof.Property has unexpected type %T", x)
	}
	return nil
}

func _Proof_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Proof)
	switch tag {
	case 7: // property.readable_name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Property = &Proof_ReadableName{x}
		return true, err
	case 9: // property.compact_name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Property = &Proof_CompactName{x}
		return true, err
	default:
		return false, nil
	}
}

func _Proof_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Proof)
	// property
	switch x := m.Property.(type) {
	case *Proof_ReadableName:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.ReadableName)))
		n += len(x.ReadableName)
	case *Proof_CompactName:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.CompactName)))
		n += len(x.CompactName)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

var E_ExcludeFromTree = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         2862100,
	Name:          "proofs.exclude_from_tree",
	Tag:           "varint,2862100,opt,name=exclude_from_tree,json=excludeFromTree",
	Filename:      "proof.proto",
}

var E_HashedField = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         2862101,
	Name:          "proofs.hashed_field",
	Tag:           "varint,2862101,opt,name=hashed_field,json=hashedField",
	Filename:      "proof.proto",
}

var E_FieldLength = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*uint64)(nil),
	Field:         2862102,
	Name:          "proofs.field_length",
	Tag:           "varint,2862102,opt,name=field_length,json=fieldLength",
	Filename:      "proof.proto",
}

var E_MappingKey = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         2862103,
	Name:          "proofs.mapping_key",
	Tag:           "bytes,2862103,opt,name=mapping_key,json=mappingKey",
	Filename:      "proof.proto",
}

func init() {
	proto.RegisterType((*MerkleHash)(nil), "proofs.MerkleHash")
	proto.RegisterType((*Proof)(nil), "proofs.Proof")
	proto.RegisterExtension(E_ExcludeFromTree)
	proto.RegisterExtension(E_HashedField)
	proto.RegisterExtension(E_FieldLength)
	proto.RegisterExtension(E_MappingKey)
}

func init() { proto.RegisterFile("proof.proto", fileDescriptor_proof_44973eef72e86904) }

var fileDescriptor_proof_44973eef72e86904 = []byte{
	// 411 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xcd, 0x8a, 0xd4, 0x40,
	0x10, 0xc7, 0x37, 0xce, 0x87, 0x33, 0x95, 0x2c, 0x62, 0xb3, 0x87, 0x20, 0x08, 0x61, 0x57, 0x61,
	0xf0, 0x90, 0x05, 0x05, 0x0f, 0x73, 0x73, 0x84, 0x25, 0xe0, 0xaa, 0x43, 0xe3, 0xc9, 0x4b, 0xe8,
	0x24, 0x95, 0x0f, 0xa6, 0x93, 0x6e, 0xba, 0x7b, 0xc4, 0x79, 0x0f, 0x3f, 0xde, 0xc2, 0xe7, 0xf1,
	0x29, 0x7c, 0x06, 0xe9, 0xee, 0x84, 0x3d, 0xce, 0x29, 0x55, 0xff, 0xd4, 0xff, 0x57, 0x95, 0x3f,
	0x81, 0x50, 0x2a, 0x21, 0xea, 0x54, 0x2a, 0x61, 0x04, 0x59, 0xba, 0x46, 0x3f, 0x4b, 0x1a, 0x21,
	0x1a, 0x8e, 0xb7, 0x4e, 0x2d, 0x8e, 0xf5, 0x6d, 0x85, 0xba, 0x54, 0x9d, 0x34, 0x42, 0xf9, 0xc9,
	0xeb, 0xb7, 0x00, 0x1f, 0x51, 0x1d, 0x38, 0x66, 0x4c, 0xb7, 0x84, 0xc0, 0x9c, 0x63, 0x6d, 0xe2,
	0x20, 0x09, 0x36, 0x11, 0x75, 0x35, 0xb9, 0x82, 0x85, 0xea, 0x9a, 0xd6, 0xc4, 0x8f, 0x9c, 0xe8,
	0x9b, 0xeb, 0x7f, 0x01, 0x2c, 0xf6, 0x76, 0x09, 0x79, 0x09, 0x97, 0x0a, 0x59, 0xc5, 0x0a, 0x8e,
	0xf9, 0xc0, 0x7a, 0x8c, 0x1f, 0x27, 0xc1, 0x66, 0x9d, 0x5d, 0xd0, 0x68, 0x92, 0x3f, 0xb1, 0x1e,
	0xc9, 0x0d, 0x44, 0xa5, 0xe8, 0x25, 0x2b, 0x8d, 0x9f, 0x5a, 0x5b, 0x5a, 0x76, 0x41, 0xc3, 0x51,
	0x75, 0x43, 0x57, 0xb0, 0xf8, 0xc6, 0xf8, 0x11, 0xa7, 0x5d, 0xae, 0xb1, 0x57, 0x69, 0xc6, 0x4d,
	0x3c, 0xf3, 0x57, 0xd9, 0xda, 0x6a, 0x2d, 0xd3, 0x6d, 0xbc, 0xf4, 0x9a, 0xad, 0xc9, 0x2b, 0x58,
	0xda, 0x27, 0xea, 0x78, 0x9e, 0xcc, 0x36, 0xe1, 0x6b, 0x92, 0xfa, 0x18, 0xd2, 0x87, 0x2f, 0xa4,
	0xe3, 0x04, 0xb9, 0x81, 0x4b, 0x2d, 0x94, 0xc1, 0x2a, 0x1f, 0x2d, 0x8b, 0x64, 0xb6, 0x89, 0x68,
	0xe4, 0xc5, 0xcc, 0x69, 0x3b, 0x80, 0x95, 0x54, 0x42, 0xa2, 0x32, 0xa7, 0xed, 0x3d, 0x3c, 0xc5,
	0xef, 0x25, 0x3f, 0x56, 0x98, 0xd7, 0x4a, 0xf4, 0xb9, 0x51, 0x88, 0xe4, 0x79, 0xea, 0x03, 0x4e,
	0xa7, 0x80, 0xd3, 0xbb, 0x0e, 0x79, 0xf5, 0x59, 0x9a, 0x4e, 0x0c, 0x3a, 0xfe, 0xf1, 0xf7, 0x8f,
	0x4d, 0x72, 0x45, 0x9f, 0x8c, 0xd6, 0x3b, 0x25, 0xfa, 0x2f, 0x0a, 0x71, 0xfb, 0x1e, 0x22, 0xb7,
	0xb7, 0xca, 0x6b, 0x6b, 0x38, 0x07, 0xfa, 0x39, 0x81, 0x42, 0xef, 0x72, 0x2f, 0x2d, 0xc4, 0xb9,
	0x73, 0x8e, 0x43, 0x63, 0xda, 0x73, 0x90, 0x5f, 0x1e, 0x32, 0xa7, 0xa1, 0x73, 0xdd, 0x3b, 0xd3,
	0xf6, 0x1d, 0x84, 0x3d, 0x93, 0xb2, 0x1b, 0x9a, 0xfc, 0x80, 0xa7, 0x73, 0x8c, 0xdf, 0x9e, 0xb1,
	0xa6, 0x30, 0x9a, 0x3e, 0xe0, 0x69, 0xf7, 0x02, 0xa0, 0x14, 0xfd, 0x18, 0xf6, 0x0e, 0xdc, 0x6f,
	0xb1, 0xb7, 0xf6, 0x7d, 0xf0, 0x75, 0xe5, 0x55, 0x59, 0x14, 0x4b, 0x47, 0x7c, 0xf3, 0x3f, 0x00,
	0x00, 0xff, 0xff, 0x5c, 0x7d, 0x6c, 0xc2, 0xa9, 0x02, 0x00, 0x00,
}
