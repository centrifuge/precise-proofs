// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: proof.proto

package proofspb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MerkleHash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Left  []byte `protobuf:"bytes,1,opt,name=left,proto3" json:"left,omitempty"`
	Right []byte `protobuf:"bytes,2,opt,name=right,proto3" json:"right,omitempty"`
}

func (x *MerkleHash) Reset() {
	*x = MerkleHash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proof_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerkleHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerkleHash) ProtoMessage() {}

func (x *MerkleHash) ProtoReflect() protoreflect.Message {
	mi := &file_proof_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerkleHash.ProtoReflect.Descriptor instead.
func (*MerkleHash) Descriptor() ([]byte, []int) {
	return file_proof_proto_rawDescGZIP(), []int{0}
}

func (x *MerkleHash) GetLeft() []byte {
	if x != nil {
		return x.Left
	}
	return nil
}

func (x *MerkleHash) GetRight() []byte {
	if x != nil {
		return x.Right
	}
	return nil
}

type Proof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Property:
	//	*Proof_ReadableName
	//	*Proof_CompactName
	Property isProof_Property `protobuf_oneof:"property"`
	Value    []byte           `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Salt     []byte           `protobuf:"bytes,3,opt,name=salt,proto3" json:"salt,omitempty"`
	// hash is filled if value & salt are not available
	Hash []byte `protobuf:"bytes,6,opt,name=hash,proto3" json:"hash,omitempty"`
	// Fills either 'hashes' for standard Merkle trees or 'sorted_hashes' for a lexicograhical ordered of a node hash
	// not both
	Hashes       []*MerkleHash `protobuf:"bytes,4,rep,name=hashes,proto3" json:"hashes,omitempty"`
	SortedHashes [][]byte      `protobuf:"bytes,5,rep,name=sorted_hashes,json=sortedHashes,proto3" json:"sorted_hashes,omitempty"`
}

func (x *Proof) Reset() {
	*x = Proof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proof_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proof) ProtoMessage() {}

func (x *Proof) ProtoReflect() protoreflect.Message {
	mi := &file_proof_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proof.ProtoReflect.Descriptor instead.
func (*Proof) Descriptor() ([]byte, []int) {
	return file_proof_proto_rawDescGZIP(), []int{1}
}

func (m *Proof) GetProperty() isProof_Property {
	if m != nil {
		return m.Property
	}
	return nil
}

func (x *Proof) GetReadableName() string {
	if x, ok := x.GetProperty().(*Proof_ReadableName); ok {
		return x.ReadableName
	}
	return ""
}

func (x *Proof) GetCompactName() []byte {
	if x, ok := x.GetProperty().(*Proof_CompactName); ok {
		return x.CompactName
	}
	return nil
}

func (x *Proof) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Proof) GetSalt() []byte {
	if x != nil {
		return x.Salt
	}
	return nil
}

func (x *Proof) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *Proof) GetHashes() []*MerkleHash {
	if x != nil {
		return x.Hashes
	}
	return nil
}

func (x *Proof) GetSortedHashes() [][]byte {
	if x != nil {
		return x.SortedHashes
	}
	return nil
}

type isProof_Property interface {
	isProof_Property()
}

type Proof_ReadableName struct {
	ReadableName string `protobuf:"bytes,7,opt,name=readable_name,json=readableName,proto3,oneof"`
}

type Proof_CompactName struct {
	CompactName []byte `protobuf:"bytes,9,opt,name=compact_name,json=compactName,proto3,oneof"`
}

func (*Proof_ReadableName) isProof_Property() {}

func (*Proof_CompactName) isProof_Property() {}

var file_proof_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         2862100,
		Name:          "proofs.exclude_from_tree",
		Tag:           "varint,2862100,opt,name=exclude_from_tree",
		Filename:      "proof.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         2862101,
		Name:          "proofs.hashed_field",
		Tag:           "varint,2862101,opt,name=hashed_field",
		Filename:      "proof.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*uint64)(nil),
		Field:         2862102,
		Name:          "proofs.field_length",
		Tag:           "varint,2862102,opt,name=field_length",
		Filename:      "proof.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         2862103,
		Name:          "proofs.mapping_key",
		Tag:           "bytes,2862103,opt,name=mapping_key",
		Filename:      "proof.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         2862104,
		Name:          "proofs.append_fields",
		Tag:           "varint,2862104,opt,name=append_fields",
		Filename:      "proof.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         2862105,
		Name:          "proofs.no_salt",
		Tag:           "varint,2862105,opt,name=no_salt",
		Filename:      "proof.proto",
	},
}

// Extension fields to descriptorpb.FieldOptions.
var (
	// optional bool exclude_from_tree = 2862100;
	E_ExcludeFromTree = &file_proof_proto_extTypes[0]
	// optional bool hashed_field = 2862101;
	E_HashedField = &file_proof_proto_extTypes[1]
	// optional uint64 field_length = 2862102;
	E_FieldLength = &file_proof_proto_extTypes[2]
	// optional string mapping_key = 2862103;
	E_MappingKey = &file_proof_proto_extTypes[3]
	// optional bool append_fields = 2862104;
	E_AppendFields = &file_proof_proto_extTypes[4]
	// optional bool no_salt = 2862105;
	E_NoSalt = &file_proof_proto_extTypes[5]
)

var File_proof_proto protoreflect.FileDescriptor

var file_proof_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x70,
	0x72, 0x6f, 0x6f, 0x66, 0x73, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x36, 0x0a, 0x0a, 0x4d, 0x65, 0x72, 0x6b, 0x6c,
	0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x22,
	0xee, 0x01, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x25, 0x0a, 0x0d, 0x72, 0x65, 0x61,
	0x64, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x61, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x12, 0x2a, 0x0a, 0x06, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x2e, 0x4d, 0x65, 0x72,
	0x6b, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x52, 0x06, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0c, 0x73, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x48, 0x61,
	0x73, 0x68, 0x65, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x3a, 0x4c, 0x0a, 0x11, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x74, 0x72, 0x65, 0x65, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x94, 0xd8, 0xae, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x65,
	0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x72, 0x65, 0x65, 0x3a, 0x43,
	0x0a, 0x0c, 0x68, 0x61, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x95, 0xd8,
	0xae, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x68, 0x61, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x3a, 0x43, 0x0a, 0x0c, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x96, 0xd8, 0xae, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x3a, 0x41, 0x0a, 0x0b, 0x6d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x97, 0xd8, 0xae, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x3a, 0x45, 0x0a, 0x0d, 0x61,
	0x70, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x98, 0xd8, 0xae, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x3a, 0x39, 0x0a, 0x07, 0x6e, 0x6f, 0x5f, 0x73, 0x61, 0x6c, 0x74, 0x12, 0x1d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x99, 0xd8, 0xae,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6e, 0x6f, 0x53, 0x61, 0x6c, 0x74, 0x42, 0x56, 0x0a,
	0x0a, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x42, 0x0a, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x66, 0x75, 0x67, 0x65,
	0x2f, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x65, 0x2d, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x2f,
	0x70, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x70, 0x72, 0x6f,
	0x6f, 0x66, 0x73, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proof_proto_rawDescOnce sync.Once
	file_proof_proto_rawDescData = file_proof_proto_rawDesc
)

func file_proof_proto_rawDescGZIP() []byte {
	file_proof_proto_rawDescOnce.Do(func() {
		file_proof_proto_rawDescData = protoimpl.X.CompressGZIP(file_proof_proto_rawDescData)
	})
	return file_proof_proto_rawDescData
}

var file_proof_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_proof_proto_goTypes = []interface{}{
	(*MerkleHash)(nil),                // 0: proofs.MerkleHash
	(*Proof)(nil),                     // 1: proofs.Proof
	(*descriptorpb.FieldOptions)(nil), // 2: google.protobuf.FieldOptions
}
var file_proof_proto_depIdxs = []int32{
	0, // 0: proofs.Proof.hashes:type_name -> proofs.MerkleHash
	2, // 1: proofs.exclude_from_tree:extendee -> google.protobuf.FieldOptions
	2, // 2: proofs.hashed_field:extendee -> google.protobuf.FieldOptions
	2, // 3: proofs.field_length:extendee -> google.protobuf.FieldOptions
	2, // 4: proofs.mapping_key:extendee -> google.protobuf.FieldOptions
	2, // 5: proofs.append_fields:extendee -> google.protobuf.FieldOptions
	2, // 6: proofs.no_salt:extendee -> google.protobuf.FieldOptions
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	1, // [1:7] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_proof_proto_init() }
func file_proof_proto_init() {
	if File_proof_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proof_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerkleHash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proof_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proof_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Proof_ReadableName)(nil),
		(*Proof_CompactName)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proof_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 6,
			NumServices:   0,
		},
		GoTypes:           file_proof_proto_goTypes,
		DependencyIndexes: file_proof_proto_depIdxs,
		MessageInfos:      file_proof_proto_msgTypes,
		ExtensionInfos:    file_proof_proto_extTypes,
	}.Build()
	File_proof_proto = out.File
	file_proof_proto_rawDesc = nil
	file_proof_proto_goTypes = nil
	file_proof_proto_depIdxs = nil
}
